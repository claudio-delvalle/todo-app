Todo-App Development by Pablo Camacho
The beggining:
The very first step was to create the repository, task that was done by Claudio, then he created
the Angular proyect, this had to be done by using the CLI (Command line Interface) of Angular.
After this I was added as collaborator in the GitHub repository where I had to create the workflow
in a .yaml file. This workflow allow us to use a remote pc to do te tests and deploy of our application in git hub pages using github actions.
The design of the App UI was made using Figma where I added all the features I would like to see in the app.
After that I created the todo-list component using the CLI with the comand (ng generate component todo-list) where I had my ever first approach to testing because I was told that its a good practice to write the tests before the implementation of the class component. My implementation of the test consisted in check if the component display the todos, so the unit test consisted in adding a fake todo to the list in the component and to verify if the templeate rendered it via tracking the tag class, also consisten in verify if the templates rendered a empty and a error message. This first approach scared me because I thought it was very dificult.
The next step was to update the workflow to implement correctly the test on the remote computer, this task was done by adding a headless chrome directive to the test action.
In order to declare the structure of a Todo I created its interface using the Angular CLI (ng generate interface) this allowed me to create instances of a Todo in any part of the application by only importing this interface. This interface is a Class that uses the "export" to tell Angular that it can be imported from anywhere.
After the workflow update I started the implementation of the todo-list component by creating an array of todos called todoList, this atrribute of the class stored the todos. This attribute was manipulated by the methods that add and update todos.To add a new todo was necessary to recieve it form the template but for this I had to create new components like todo-component , todo-form and todo-service,all where created from the console using the Angular CLI (ng generate compponent / ng generate service) because the shortcut on Angular to create components is not updated and create the components whitout the StandAlone option.
The todo-service is the file where I declare all the methods that manipulate de data base (at the beggining the data base was only a file with an array of todos inside).
The last two components I created were HomePage-Component and the add-Button-Component. The first one is the component that contains the main elements of the app, this app was created with the vision of having multiple pages to show diferent information on each page. The add-Button-Component was created in order to use it both as add todo button and as add category button.The implementation of the home-page-component class is empty because we use its template only to instantiate the componente we want to display there, at this moment the only instatiated component is todo-list(the father of todo-form and todo components).The add-button-component class implementation was written by Claudio, he created an event emitter using the @Output decorator and a method called "addClick" that triggers the emition of the event, this event is listened by the fathers component in the todo-list template,
where in case of recieving an (add) event, changes the value of the "isAdding" atribute that is managed by todo-list-component class, this change updates the todo-list template in order to replace the renedering of all the todos with a form where the user can complete the data to add a new todo.
Once I had everything created I started with the implementations, the first thing I made was the rendering of the todos, using a @for directive in the todo-list template I sent each todo via [todo] in the todo-app instance tag to be able to use its properties in the todo-app template, this is posible because the todo-component-class had an @Input decorator where the todo information were stored. With the todo information I called the properties I want to render using {} to acces to each one, also having the todo information I used the method todoDone to update the data base everytime the chekbox was marked as done, this implementation used a event emitter with the @Output decorator to send this update to todo-list(father).
